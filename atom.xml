<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Skyen&#39;s Blog</title>
  
  <subtitle>Bye Bye Baby Blue, I wish you can see the wicked truth!</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-20T02:34:04.268Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Skyen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode--30 天 JavaScript 挑战</title>
    <link href="http://example.com/2023/07/20/Leetcode-0720/"/>
    <id>http://example.com/2023/07/20/Leetcode-0720/</id>
    <published>2023-07-20T01:46:38.000Z</published>
    <updated>2023-07-20T02:34:04.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="闭包专题"><a href="#闭包专题" class="headerlink" title="闭包专题"></a>闭包专题</h1><h2 id="2667-创建-Hello-World-函数"><a href="#2667-创建-Hello-World-函数" class="headerlink" title="2667. 创建 Hello World 函数"></a>2667. 创建 Hello World 函数</h2><p>请你编写一个名为 createHelloWorld 的函数。它应该返回一个新的函数，该函数总是返回 “Hello World”。</p><blockquote><p>示例 1：<br>输入：args = []<br>输出：”Hello World”<br>解释：<br>const f = createHelloWorld();<br>f(); // “Hello World”<br>createHelloWorld 返回的函数应始终返回 “Hello World”。</p></blockquote><blockquote><p>示例 2：<br>输入：args = [{},null,42]<br>输出：”Hello World”<br>解释：<br>const f = createHelloWorld();<br>f({}, null, 42); // “Hello World”<br>可以传递任何参数给函数，但它应始终返回 “Hello World”。</p></blockquote><blockquote><p>提示：<br>0 &lt;= args.length &lt;= 10</p></blockquote><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Function&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> createHelloWorld = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2620-计数器"><a href="#2620-计数器" class="headerlink" title="2620. 计数器"></a>2620. 计数器</h2><p>请你编写并返回一个 计数器 函数，它接收一个整型参数 n 。这个 计数器 函数最初返回 n，每次调用它时返回前一个值加 1 的值 ( n ,  n + 1 ,  n + 2 ，等等)。</p><blockquote><p>示例 1：<br>输入：<br>n = 10<br>[“call”,”call”,”call”]<br>输出：[10,11,12]<br>解释：<br>counter() = 10 // 第一次调用 counter()，返回 n。<br>counter() = 11 // 返回上次调用的值加 1。<br>counter() = 12 // 返回上次调用的值加 1。</p></blockquote><blockquote><p>示例 2：<br>输入：<br>n = -2<br>[“call”,”call”,”call”,”call”,”call”]<br>输出：[-2,-1,0,1,2]<br>解释：counter() 最初返回 -2。然后在每个后续调用后增加 1。</p></blockquote><h1 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Function&#125;</span> <span class="variable">counter</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> createCounter = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n++;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * const counter = createCounter(10)</span></span><br><span class="line"><span class="comment"> * counter() // 10</span></span><br><span class="line"><span class="comment"> * counter() // 11</span></span><br><span class="line"><span class="comment"> * counter() // 12</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="2704-相等还是不相等"><a href="#2704-相等还是不相等" class="headerlink" title="2704. 相等还是不相等"></a>2704. 相等还是不相等</h2><p>请你编写一个名为 expect 的函数，用于帮助开发人员测试他们的代码。它应该接受任何值 val 并返回一个包含以下两个函数的对象。</p><p>toBe(val) 接受另一个值并在两个值相等（ === ）时返回 true 。如果它们不相等，则应抛出错误 “Not Equal” 。<br>notToBe(val) 接受另一个值并在两个值不相等（ !== ）时返回 true 。如果它们相等，则应抛出错误 “Equal” 。</p><blockquote><p>示例 1：<br>输入：func = () =&gt; expect(5).toBe(5)<br>输出：{“value”: true}<br>解释：5 === 5 因此该表达式返回 true。</p></blockquote><blockquote><p>示例 2：<br>输入：func = () =&gt; expect(5).toBe(null)<br>输出：{“error”: “Not Equal”}<br>解释：5 !== null 因此抛出错误 “Not Equal”.</p></blockquote><blockquote><p>示例 3：<br>输入：func = () =&gt; expect(5).notToBe(null)<br>输出：{“value”: true}<br>解释：5 !== null 因此该表达式返回 true.</p></blockquote><h1 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">val</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Object&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> expect = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        toBe: <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(val === a) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span> (<span class="string">&quot;Not Equal&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        notToBe: <span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(val !== b) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span> (<span class="string">&quot;Equal&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * expect(5).toBe(5); // true</span></span><br><span class="line"><span class="comment"> * expect(5).notToBe(5); // throws &quot;Equal&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="2665-计数器-II"><a href="#2665-计数器-II" class="headerlink" title="2665. 计数器 II"></a>2665. 计数器 II</h2><p>请你写一个函数 createCounter. 这个函数接收一个初始的整数值 init  并返回一个包含三个函数的对象。</p><p>这三个函数是：<br>increment() 将当前值加 1 并返回。<br>decrement() 将当前值减 1 并返回。<br>reset() 将当前值设置为 init 并返回。</p><blockquote><p>示例 1：<br>输入：init = 5, calls = [“increment”,”reset”,”decrement”]<br>输出：[6,5,4]<br>解释：<br>const counter = createCounter(5);<br>counter.increment(); // 6<br>counter.reset(); // 5<br>counter.decrement(); // 4</p></blockquote><blockquote><p>示例 2：<br>输入：init = 0, calls = [“increment”,”increment”,”decrement”,”reset”,”reset”]<br>输出：[1,2,1,0,0]<br>解释：<br>const counter = createCounter(0);<br>counter.increment(); // 1<br>counter.increment(); // 2<br>counter.decrement(); // 1<br>counter.reset(); // 0<br>counter.reset(); // 0</p></blockquote><blockquote><p>提示：<br>-1000 &lt;= init &lt;= 1000<br>总调用次数不会超过 1000</p></blockquote><h1 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;integer&#125;</span> <span class="variable">init</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123; increment: Function, decrement: Function, reset: Function &#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> createCounter = <span class="function"><span class="keyword">function</span>(<span class="params">init</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        val: init,</span><br><span class="line">        increment: <span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ++init;</span><br><span class="line">        &#125;,</span><br><span class="line">        reset: <span class="function"><span class="keyword">function</span> <span class="title">reset</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (init = <span class="built_in">this</span>.val);</span><br><span class="line">        &#125;,</span><br><span class="line">        decrement: <span class="function"><span class="keyword">function</span> <span class="title">decrement</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> --init;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * const counter = createCounter(5)</span></span><br><span class="line"><span class="comment"> * counter.increment(); // 6</span></span><br><span class="line"><span class="comment"> * counter.reset(); // 5</span></span><br><span class="line"><span class="comment"> * counter.decrement(); // 4</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;闭包专题&quot;&gt;&lt;a href=&quot;#闭包专题&quot; class=&quot;headerlink&quot; title=&quot;闭包专题&quot;&gt;&lt;/a&gt;闭包专题&lt;/h1&gt;&lt;h2 id=&quot;2667-创建-Hello-World-函数&quot;&gt;&lt;a href=&quot;#2667-创建-Hello-World-函数&quot;</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="闭包" scheme="http://example.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--876. 链表的中间结点 &amp;&amp; 19. 删除链表的倒数第 N 个结点</title>
    <link href="http://example.com/2021/11/18/LeetCode--876.%20%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E7%BB%93%E7%82%B9/"/>
    <id>http://example.com/2021/11/18/LeetCode--876.%20%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E7%BB%93%E7%82%B9/</id>
    <published>2021-11-18T12:35:50.000Z</published>
    <updated>2021-11-18T16:02:00.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description（876-链表的中间结点）"><a href="#Description（876-链表的中间结点）" class="headerlink" title="Description（876. 链表的中间结点）"></a>Description（876. 链表的中间结点）</h1><p>给定一个头结点为 head 的非空单链表，返回链表的中间结点。</p><p>如果有两个中间结点，则返回第二个中间结点。</p><blockquote><p>示例 1：</p><p>输入：[1,2,3,4,5]<br>输出：此列表中的结点 3 (序列化形式：[3,4,5])<br>返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。<br>注意，我们返回了一个 ListNode 类型的对象 ans，这样：<br>ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.</p></blockquote><blockquote><p>示例 2：</p><p>输入：[1,2,3,4,5,6]<br>输出：此列表中的结点 4 (序列化形式：[4,5,6])<br>由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。</p></blockquote><blockquote><p>提示：</p><p>给定链表的结点数介于 1 和 100 之间。</p></blockquote><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>学到了一个很巧妙的办法——快慢指针。</p><p>通过两个指针，慢指针一次加一，快指针一次加二，那么在快指针到末尾的时候，慢指针就对应着链表中的中间位置，直接输入慢指针即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> middleNode = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    slow = fast = head;</span><br><span class="line">    <span class="keyword">while</span> (fast &amp;&amp; fast.next) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Description（19-删除链表的倒数第-N-个结点）"><a href="#Description（19-删除链表的倒数第-N-个结点）" class="headerlink" title="Description（19. 删除链表的倒数第 N 个结点）"></a>Description（19. 删除链表的倒数第 N 个结点）</h1><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p><blockquote><p>示例 1：</p><p>输入：head = [1,2,3,4,5], n = 2<br>输出：[1,2,3,5]</p></blockquote><blockquote><p>示例 2：</p><p>输入：head = [1], n = 1<br>输出：[]</p></blockquote><blockquote><p>示例 3：</p><p>输入：head = [1,2], n = 1<br>输出：[1]</p></blockquote><blockquote><p>提示：</p><p>链表中结点的数目为 sz<br>1 &lt;= sz &lt;= 30<br>0 &lt;= Node.val &lt;= 100<br>1 &lt;= n &lt;= sz</p></blockquote><blockquote><p>进阶：你能尝试使用一趟扫描实现吗？</p></blockquote><h1 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h1><p>本体也应用了快慢指针，因为要删除链表的倒数第n个节点，那么假设一个慢指针，一个快指针，快指针=慢指针+n，那么循环到最后时，当快指针走到链表末尾时，慢指针指向的节点就是要删除的节点，这时直接指向下下个节点就相当于删除该节点。</p><p>考虑到特殊情况，如果快指针不为空，真实存在，那么以上成立；如果为空，就表示只有一个节点，那么直接返回头节点的下一个节点即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> removeNthFromEnd = <span class="function"><span class="keyword">function</span>(<span class="params">head, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> slow = head, fast = head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!fast)</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    <span class="keyword">while</span>(fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    slow.next = slow.next.next;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Description（876-链表的中间结点）&quot;&gt;&lt;a href=&quot;#Description（876-链表的中间结点）&quot; class=&quot;headerlink&quot; title=&quot;Description（876. 链表的中间结点）&quot;&gt;&lt;/a&gt;Description（8</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--344.反转字符串 &amp;&amp; 557. 反转字符串中的单词 III</title>
    <link href="http://example.com/2021/11/17/LeetCode%20--%20344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%20&amp;&amp;%20557.%20%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D%20III/"/>
    <id>http://example.com/2021/11/17/LeetCode%20--%20344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%20&amp;&amp;%20557.%20%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D%20III/</id>
    <published>2021-11-17T13:28:42.000Z</published>
    <updated>2021-11-18T15:39:28.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description（344-反转字符串）"><a href="#Description（344-反转字符串）" class="headerlink" title="Description（344.反转字符串）"></a>Description（344.反转字符串）</h1><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p><blockquote><p>示例 1：</p><p>输入：s = [“h”,”e”,”l”,”l”,”o”]<br>输出：[“o”,”l”,”l”,”e”,”h”]</p></blockquote><blockquote><p>示例 2：</p><p>输入：s = [“H”,”a”,”n”,”n”,”a”,”h”]<br>输出：[“h”,”a”,”n”,”n”,”a”,”H”]</p></blockquote><blockquote><p>提示：</p><p>1 &lt;= s.length &lt;= 10^5<br>s[i] 都是 ASCII 码表中的可打印字符</p></blockquote><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>终于遇到了简单题！太不容易了！</p><p>主要采取双指针的解法，一个从左到右，一条从右到左，直接调换顺序，最后如果相等就直接跳出循环。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> left = <span class="number">0</span>, right = s.length -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> change = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        change = s[left];</span><br><span class="line">        s[left] = s[right];</span><br><span class="line">        s[right] = change;</span><br><span class="line">        ++ left;</span><br><span class="line">        -- right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Description（557-反转字符串中的单词-III）"><a href="#Description（557-反转字符串中的单词-III）" class="headerlink" title="Description（557. 反转字符串中的单词 III）"></a>Description（557. 反转字符串中的单词 III）</h1><p>给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。</p><blockquote><p>示例：</p><p>输入：”Let’s take LeetCode contest”<br>输出：”s’teL ekat edoCteeL tsetnoc”</p></blockquote><blockquote><p>提示：</p><p>在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。</p></blockquote><h1 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h1><p>我的解法是先将字符串末尾加一个空格，然后从头遍历，遇到空格时，将前面的字符串直接翻转，存到新的字符串，再在新数组后面加上一个空格，最后返回的数组后面会多一个空格，再把后面的空格删除就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseWords = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s1 = s + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> total = s1.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= total)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1[i] != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            ++ i;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s1[i] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>( j=i-<span class="number">1</span>; j &gt;= left; --j)&#123;</span><br><span class="line">                result += s1[j];</span><br><span class="line">            &#125;</span><br><span class="line">            ++ i;</span><br><span class="line">            left = i;</span><br><span class="line">            result += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result = result.substring(<span class="number">0</span>,total);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Description（344-反转字符串）&quot;&gt;&lt;a href=&quot;#Description（344-反转字符串）&quot; class=&quot;headerlink&quot; title=&quot;Description（344.反转字符串）&quot;&gt;&lt;/a&gt;Description（344.反转字符</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--189.轮转数组 &amp;&amp; 283. 移动零 &amp;&amp; 167. 两数之和II - 输入有序数组</title>
    <link href="http://example.com/2021/11/16/LeetCode-189.%20%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2021/11/16/LeetCode-189.%20%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84/</id>
    <published>2021-11-16T13:13:50.000Z</published>
    <updated>2021-11-16T14:23:24.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description（189-轮转数组）"><a href="#Description（189-轮转数组）" class="headerlink" title="Description（189.轮转数组）"></a>Description（189.轮转数组）</h1><p>给你一个数组，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。</p><blockquote><p>示例 1:</p><p>输入: nums = [1,2,3,4,5,6,7], k = 3<br>输出: [5,6,7,1,2,3,4]<br>解释:<br>向右轮转 1 步: [7,1,2,3,4,5,6]<br>向右轮转 2 步: [6,7,1,2,3,4,5]<br>向右轮转 3 步: [5,6,7,1,2,3,4]</p></blockquote><blockquote><p>示例 2:</p><p>输入：nums = [-1,-100,3,99], k = 2<br>输出：[3,99,-1,-100]<br>解释:<br>向右轮转 1 步: [99,-1,-100,3]<br>向右轮转 2 步: [3,99,-1,-100]</p></blockquote><blockquote><p>提示：</p><p>1 &lt;= nums.length &lt;= 10^5<br>-2^31 &lt;= nums[i] &lt;= 2^31 - 1<br>0 &lt;= k &lt;= 10^5</p></blockquote><blockquote><p>进阶：</p><p>尽可能想出更多的解决方案，至少有<strong>三种</strong>不同的方法可以解决这个问题。<br>你可以使用空间复杂度为 O(1) 的<strong>原地</strong>算法解决这个问题吗？</p></blockquote><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="第一种解法："><a href="#第一种解法：" class="headerlink" title="第一种解法："></a>第一种解法：</h3><p>使用额外的数组来将每个元素转换到正确的位置。用n表示数组的长度，遍历原数组，将原数组下标为最i的元素换到（i+k）%n的位置，最后将新数组放到原数组即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rotate = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n = nums.length;</span><br><span class="line">    <span class="keyword">const</span> newArr = <span class="keyword">new</span> <span class="built_in">Array</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        newArr[(i + k) % n] = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        nums[i] = newArr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二种解法："><a href="#第二种解法：" class="headerlink" title="第二种解法："></a>第二种解法：</h3><p>对数组进行翻转，首先对整个数组进行翻转，然后将0～k mod n-1区间的元素和k mod n～n-1的元素再次翻转，就可以得到最后的答案。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reverse = <span class="function">(<span class="params">nums, start, end</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        <span class="keyword">const</span> temp = nums[start];</span><br><span class="line">        nums[start] = nums[end];</span><br><span class="line">        nums[end] = temp;</span><br><span class="line">        start += <span class="number">1</span>;</span><br><span class="line">        end -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rotate = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    k %= nums.length;</span><br><span class="line">    reverse(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    reverse(nums, <span class="number">0</span>, k - <span class="number">1</span>);</span><br><span class="line">    reverse(nums, k, nums.length - <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Description（283-移动零）"><a href="#Description（283-移动零）" class="headerlink" title="Description（283. 移动零）"></a>Description（283. 移动零）</h1><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p><blockquote><p>示例:</p><p>输入: [0,1,0,3,12]<br>输出: [1,3,12,0,0]</p></blockquote><blockquote><p>说明:</p><p>必须在原数组上操作，不能拷贝额外的数组。<br>尽量减少操作次数。</p></blockquote><h1 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h1><p>解题思路很简单，可以说是将数组中的0直接删除，将0后面的元素都往前提一个，然后pop数组最后一个元素，再把0补进去就可以，要注意是循环的顺序是要从后往前，而不是从前往后，因为是把元素往前提一个，不适合从前往后。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moveZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.length -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> total = nums.length -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> anoth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[right] == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(i = right; i &lt; total; ++i )&#123;</span><br><span class="line">                anoth = nums[i+<span class="number">1</span>];</span><br><span class="line">                nums[i] = anoth;</span><br><span class="line">            &#125;</span><br><span class="line">            nums.pop(nums[total]);</span><br><span class="line">            nums.push(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        -- right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Description（167-两数之和II-输入有序数组）"><a href="#Description（167-两数之和II-输入有序数组）" class="headerlink" title="Description（167. 两数之和II - 输入有序数组）"></a>Description（167. 两数之和II - 输入有序数组）</h1><p>给定一个已按照 非递减顺序排列  的整数数组 numbers ，请你从数组中找出两个数满足相加之和等于目标数 target 。</p><p>函数应该以长度为 2 的整数数组的形式返回这两个数的下标值。numbers 的下标 从 1 开始计数 ，所以答案数组应当满足 1 &lt;= answer[0] &lt; answer[1] &lt;= numbers.length 。</p><p>你可以假设每个输入只对应唯一的答案 ，而且你不可以重复使用相同的元素。</p><blockquote><p>示例 1：</p><p>输入：numbers = [2,7,11,15], target = 9<br>输出：[1,2]<br>解释：2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</p></blockquote><blockquote><p>示例 2：</p><p>输入：numbers = [2,3,4], target = 6<br>输出：[1,3]</p></blockquote><blockquote><p>示例 3：</p><p>输入：numbers = [-1,0], target = -1<br>输出：[1,2]</p></blockquote><blockquote><p>提示：</p><p>2 &lt;= numbers.length &lt;= 3 * 104<br>-1000 &lt;= numbers[i] &lt;= 1000<br>numbers 按非递减顺序排列<br>-1000 &lt;= target &lt;= 1000<br>仅存在一个有效答案</p></blockquote><h1 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h1><p>因为是非减序数组，所以可以通过两条指针数据进行判断，一条从头部开始，一条从尾部开始，如果符合需要的值，就将其下表+1后push到新数组，如果不是，就继续通过指针进行遍历，知道找到合适的组合。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">numbers, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> total = numbers.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>,right = total,need = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        need = target - numbers[right];</span><br><span class="line">        <span class="keyword">if</span>(need == numbers[left])&#123;</span><br><span class="line">           result.push(++left);               </span><br><span class="line">           result.push(++right);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(need &gt; numbers[left])&#123;</span><br><span class="line">            ++left;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            --right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Description（189-轮转数组）&quot;&gt;&lt;a href=&quot;#Description（189-轮转数组）&quot; class=&quot;headerlink&quot; title=&quot;Description（189.轮转数组）&quot;&gt;&lt;/a&gt;Description（189.轮转数组）&lt;/</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode--977.有序数组的平方</title>
    <link href="http://example.com/2021/11/15/LeetCode--977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/"/>
    <id>http://example.com/2021/11/15/LeetCode--977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/</id>
    <published>2021-11-15T12:52:02.000Z</published>
    <updated>2021-11-15T13:14:42.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给你一个按  <strong>非递减顺序</strong> 排序的整数数组 <strong>nums</strong>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p><blockquote><p>示例 1：</p><p>输入：nums = [-4,-1,0,3,10]<br>输出：[0,1,9,16,100]<br>解释：平方后，数组变为 [16,1,0,9,100]<br>排序后，数组变为 [0,1,9,16,100]</p></blockquote><blockquote><p>示例 2：</p><p>输入：nums = [-7,-3,2,3,11]<br>输出：[4,9,9,49,121]</p></blockquote><blockquote><p>提示：</p><p>1 &lt;= nums.length &lt;= 10^4<br>-10^4 &lt;= nums[i] &lt;= 10^4<br>nums 已按 非递减顺序 排序</p></blockquote><p>进阶：</p><p>请你设计时间复杂度为 O(n) 的算法解决本问题。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>这道题的关键其实就是对数组中的数字的绝对值进行排序，然后再依次返回数据的平方即可。</p><p>因为数据是按照非递减顺序进行排列，那我们可以从两侧开始遍历，直接比对绝对值大小，将数据更大的一项，直接push进新数组中，最后得到的是由大到小的倒序排列，最后再reverse倒装一下顺序即可。</p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sortedSquares = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> total = nums.length;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = total - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="keyword">let</span> absleft = <span class="built_in">Math</span>.abs(nums[left]);</span><br><span class="line">        <span class="keyword">let</span> absright = <span class="built_in">Math</span>.abs(nums[right]);</span><br><span class="line">        <span class="keyword">if</span>(absleft &gt; absright)&#123;</span><br><span class="line">            result.push(absleft *absleft);</span><br><span class="line">            left ++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result.push(absright *absright);</span><br><span class="line">            right --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.reverse();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;给你一个按  &lt;strong&gt;非递减顺序&lt;/strong&gt; 排序的整</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--278. 第一个错误的版本 &amp;&amp; 35. 搜索插入位置</title>
    <link href="http://example.com/2021/11/14/LeetCode--278.%20%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E7%89%88%E6%9C%AC%20&amp;&amp;%2035.%20%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/"/>
    <id>http://example.com/2021/11/14/LeetCode--278.%20%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E7%89%88%E6%9C%AC%20&amp;&amp;%2035.%20%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</id>
    <published>2021-11-14T03:39:59.000Z</published>
    <updated>2021-11-14T09:10:11.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description（278-第一个错误的版本）"><a href="#Description（278-第一个错误的版本）" class="headerlink" title="Description（278. 第一个错误的版本）"></a>Description（278. 第一个错误的版本）</h1><p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p><p>假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。</p><p>你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p><blockquote><p>示例 1：</p><p>输入：n = 5, bad = 4<br>输出：4<br>解释：<br>调用 isBadVersion(3) -&gt; false<br>调用 isBadVersion(5) -&gt; true<br>调用 isBadVersion(4) -&gt; true<br>所以，4 是第一个错误的版本。</p></blockquote><blockquote><p>示例 2：</p><p>输入：n = 1, bad = 1<br>输出：1</p></blockquote><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>这道题其实也是一个二分查找算法的应用。</p><p>因为给出的描述中，版本错误的规律是如果当前错误，那么错误版本必在前面的版本中，那么应用二分查找就十分符合了。</p><p>还是定义左右边界left 和 right，中界值middle。</p><p>如果isBadVersion(middle)为真，那么缩小范围right = middle。</p><p>否则isBadVersion(middle)，那么缩小范围left = middle + 1。</p><p>最后其实左右边界相等，返回left还是right都可以。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;function&#125;</span> </span>isBadVersion()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;function&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> solution = <span class="function"><span class="keyword">function</span>(<span class="params">isBadVersion</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;integer&#125;</span> </span>n Total versions</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return <span class="type">&#123;integer&#125;</span> </span>The first bad version</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> right = n;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">const</span> middle = <span class="built_in">Math</span>.floor((right-left)/<span class="number">2</span> + left);</span><br><span class="line">            <span class="keyword">if</span>(isBadVersion(middle))&#123;</span><br><span class="line">                right = middle;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Description（35-搜索插入位置）"><a href="#Description（35-搜索插入位置）" class="headerlink" title="Description（35. 搜索插入位置）"></a>Description（35. 搜索插入位置）</h1><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 O(log n) 的算法。</p><blockquote><p>示例 1:</p><p>输入: nums = [1,3,5,6], target = 5<br>输出: 2</p></blockquote><blockquote><p>示例 2:</p><p>输入: nums = [1,3,5,6], target = 2<br>输出: 1</p></blockquote><blockquote><p>示例 3:</p><p>输入: nums = [1,3,5,6], target = 7<br>输出: 4</p></blockquote><blockquote><p>示例 4:</p><p>输入: nums = [1,3,5,6], target = 0<br>输出: 0</p></blockquote><blockquote><p>示例 5:</p><p>输入: nums = [1], target = 0<br>输出: 0</p></blockquote><blockquote><p>提示:</p><p>1 &lt;= nums.length &lt;= 10^4<br>-10^4 &lt;= nums[i] &lt;= 10^4</p><p>nums 为无重复元素的升序排列数组<br>-10^4 &lt;= target &lt;= 10^4</p></blockquote><h1 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h1><p>这可以说是一道很标准的二分算法的题目了。</p><p>一样的思路，通过改变左右的值来控制范围，持续缩小范围，最后锁定数据目标。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchInsert = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> total = nums.length;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right = total - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="keyword">const</span> middle = <span class="built_in">Math</span>.floor((right-left) / <span class="number">2</span> + left);</span><br><span class="line">        <span class="keyword">if</span>(target == nums[middle])&#123;</span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &gt; nums[middle])&#123;</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &lt; nums[middle])&#123;</span><br><span class="line">            right = middle - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提交上去之后，发现代码其实可以优化一下，if else循坏判断太多，没必要写三个，其实只用两个就可以。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchInsert = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> total = nums.length;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right = total - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="keyword">const</span> middle = <span class="built_in">Math</span>.floor((right-left) / <span class="number">2</span> + left);</span><br><span class="line">        <span class="keyword">if</span>(target &gt; nums[middle])&#123;</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &lt;= nums[middle])&#123;</span><br><span class="line">            right = middle - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Description（278-第一个错误的版本）&quot;&gt;&lt;a href=&quot;#Description（278-第一个错误的版本）&quot; class=&quot;headerlink&quot; title=&quot;Description（278. 第一个错误的版本）&quot;&gt;&lt;/a&gt;Descriptio</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode--704.二分查找</title>
    <link href="http://example.com/2021/11/13/leetcode--704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <id>http://example.com/2021/11/13/leetcode--704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</id>
    <published>2021-11-13T09:49:10.000Z</published>
    <updated>2021-11-13T10:11:37.144Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有刷算法题了，感觉自己得重头来了！</p><p>从二分查找开始复习了。</p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><blockquote><p>示例 1:</p><p>输入: nums = [-1,0,3,5,9,12], target = 9<br>输出: 4<br>解释: 9 出现在 nums 中并且下标为 4</p></blockquote><blockquote><p>示例 2:</p><p>输入: nums = [-1,0,3,5,9,12], target = 2<br>输出: -1<br>解释: 2 不存在 nums 中因此返回 -1</p></blockquote><blockquote><p>提示：</p><p>你可以假设 nums 中的所有元素是不重复的。<br>n 将在 [1, 10000]之间。<br>nums 的每个元素都将在 [-9999, 9999]之间。</p></blockquote><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p> 二分查找主要需要定义一个边界和中间的概念。</p><p>在这里，我们可以定义左边界为left，右边界为right，中间界为middle。</p><p>其中，right = nums.length，也就是数组的长度；middle = （right-left）+ left，也就是代表着中界值，重要的是一定要加上left，因为随着数组范围的变化，最后要取的是变化范围的ß中间值，不单是简单的中界值。</p><p>接下来，只要进行判断就行：</p><p>如果target = nums[middle]，那么返回target。</p><p>如果target &gt; nums[middle]，那么left = middle + 1；</p><p>如果target &lt; nums[middle]，那么right = middle - 1；</p><p>如果都没有，最后返回-1。</p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">let</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">const</span> middle = <span class="built_in">Math</span>.floor((right-left)/<span class="number">2</span>) + left;</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">const</span> num = nums[middle];</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span>(target === num)&#123;</span><br><span class="line"></span><br><span class="line">​            <span class="keyword">return</span> middle;</span><br><span class="line"></span><br><span class="line">​        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &gt; num)&#123;</span><br><span class="line"></span><br><span class="line">​            left = middle + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">​        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">​            right = middle -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好久没有刷算法题了，感觉自己得重头来了！&lt;/p&gt;
&lt;p&gt;从二分查找开始复习了。&lt;/p&gt;
&lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Descri</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--131.分隔回文串</title>
    <link href="http://example.com/2021/03/08/LeetCode-131-%E5%88%86%E9%9A%94%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    <id>http://example.com/2021/03/08/LeetCode-131-%E5%88%86%E9%9A%94%E5%9B%9E%E6%96%87%E4%B8%B2/</id>
    <published>2021-03-08T06:14:59.000Z</published>
    <updated>2021-03-08T06:45:31.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是回文串 。返回 s 所有可能的分割方案。</p><p>回文串:是正着读和反着读都一样的字符串。</p><blockquote><p>示例 1：</p><p>输入：s = “aab” 输出：[[“a”,”a”,”b”],[“aa”,”b”]] </p></blockquote><blockquote><p>示例 2：</p><p>输入：s = “a” 输出：[[“a”]]</p></blockquote><blockquote><p>提示：</p><p>1 &lt;= s.length &lt;= 16 s 仅由小写英文字母组成</p></blockquote><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>本题这涉及到两个关键问题：</p><p><strong>切割问题&amp;判断回文</strong></p><p>切割问题，也可以抽象为一颗树形结构，如图：</p><p><img src="https://img-blog.csdnimg.cn/20210308143016254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>递归用来纵向遍历，for循环用来横向遍历，切割线（就是图中的红线）切割到字符串的结尾位置，说明找到了一个切割方法。</p><p>此时可以发现，切割问题的回溯搜索的过程和组合问题的回溯搜索的过程是差不多的。</p><h3 id="回溯三部曲"><a href="#回溯三部曲" class="headerlink" title="回溯三部曲"></a>回溯三部曲</h3><h5 id="递归函数参数"><a href="#递归函数参数" class="headerlink" title="递归函数参数"></a>递归函数参数</h5><ul><li>全局变量数组path存放切割后回文的子串，二维数组result存放结果集。 （这两个参数可以放到函数参数里）</li></ul><p>从前面的树形结构的图中可以看出：切割线切到了字符串最后面，说明找到了一种切割方法，此时就是本层递归的终止终止条件。</p><p>在处理组合问题的时候，递归参数需要传入startIndex，表示下一轮递归遍历的起始位置，这个startIndex就是切割线。</p><ul><li>单层搜索的逻辑</li></ul><p>在for (int i = startIndex; i &lt; s.size(); i++)循环中，我们定义了起始位置startIndex，那么 [startIndex, i] 就是要截取的子串。</p><p>首先判断这个子串是不是回文，如果是回文，就加入在vector<string> path中，path用来记录切割过的回文子串。</p><p>注意切割过的位置，不能重复切割，所以，backtracking(s, i + 1); 传入下一层的起始位置为i + 1。</p><ul><li>判断回文子串</li></ul><p>最后我们看一下回文子串要如何判断了，判断一个字符串是否是回文。</p><p>可以使用双指针法，一个指针从前向后，一个指针从后先前，如果前后指针所指向的元素是相等的，就是回文字符串了。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; result;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; path; <span class="comment">// 放已经回文的子串</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backtracking</span> <span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s, <span class="keyword">int</span> startIndex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果起始位置已经大于等于s的大小，说明已经找到了一组分割方案了</span></span><br><span class="line">        <span class="keyword">if</span> (startIndex &gt;= s.size()) &#123;</span><br><span class="line">            result.push_back(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = startIndex; i &lt; s.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isPalindrome(s, startIndex, i)) &#123;   <span class="comment">// 是回文子串</span></span><br><span class="line">                <span class="comment">// 获取[startIndex,i]在s中的子串</span></span><br><span class="line">                <span class="built_in">string</span> str = s.substr(startIndex, i - startIndex + <span class="number">1</span>);</span><br><span class="line">                path.push_back(str);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;                                <span class="comment">// 不是回文，跳过</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            backtracking(s, i + <span class="number">1</span>); <span class="comment">// 寻找i+1为起始位置的子串</span></span><br><span class="line">            path.pop_back(); <span class="comment">// 回溯过程，弹出本次已经填在的子串</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start, j = end; i &lt; j; i++, j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != s[j]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; partition(<span class="built_in">string</span> s) &#123;</span><br><span class="line">        result.clear();</span><br><span class="line">        path.clear();</span><br><span class="line">        backtracking(s, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是回文串</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--832.翻转图像</title>
    <link href="http://example.com/2021/02/24/LeetCode-832-%E7%BF%BB%E8%BD%AC%E5%9B%BE%E5%83%8F/"/>
    <id>http://example.com/2021/02/24/LeetCode-832-%E7%BF%BB%E8%BD%AC%E5%9B%BE%E5%83%8F/</id>
    <published>2021-02-24T01:27:16.000Z</published>
    <updated>2021-02-24T01:33:25.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。</p><p>水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。</p><p>反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。</p><blockquote><p>示例 1:</p><p>输入: [[1,1,0],[1,0,1],[0,0,0]] 输出: [[1,0,0],[0,1,0],[1,1,1]] 解释:<br>首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；<br>     然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]</p></blockquote><blockquote><p>示例 2:</p><p>输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]] 输出:<br>[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]] 解释: 首先翻转每一行:<br>[[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；<br>     然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</p></blockquote><blockquote><p>说明:</p><p>1 &lt;= A.length = A[0].length &lt;= 20<br>0 &lt;= A[i][j] &lt;= 1</p></blockquote><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>PS：因为是二进制数组，所以反转图像可以直接用异或运算直接反转。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; flipAndInvertImage(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; A) &#123;</span><br><span class="line">        <span class="keyword">int</span> length = A.size();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>,mid = length / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">left = <span class="number">0</span>, right = length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line"><span class="keyword">if</span>(A[i][left] == A[i][right]) &#123;</span><br><span class="line">A[i][left] ^= <span class="number">1</span>;</span><br><span class="line">A[i][right] ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">++left;</span><br><span class="line">--right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (length % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">A[i][mid] ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> A;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--1052.爱生气的书店老板</title>
    <link href="http://example.com/2021/02/23/LeetCode--1052.%E7%88%B1%E7%94%9F%E6%B0%94%E7%9A%84%E4%B9%A6%E5%BA%97%E8%80%81%E6%9D%BF/"/>
    <id>http://example.com/2021/02/23/LeetCode--1052.%E7%88%B1%E7%94%9F%E6%B0%94%E7%9A%84%E4%B9%A6%E5%BA%97%E8%80%81%E6%9D%BF/</id>
    <published>2021-02-23T08:25:45.000Z</published>
    <updated>2021-11-13T09:53:03.859Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>今天，书店老板有一家店打算试营业 customers.length 分钟。每分钟都有一些顾客（customers[i]）会进入书店，所有这些顾客都会在那一分钟结束后离开。</p><p>在某些时候，书店老板会生气。 如果书店老板在第 i 分钟生气，那么 grumpy[i] = 1，否则 grumpy[i] = 0。 当书店老板生气时，那一分钟的顾客就会不满意，不生气则他们是满意的。</p><p>书店老板知道一个秘密技巧，能抑制自己的情绪，可以让自己连续 X 分钟不生气，但却只能使用一次。</p><p>请你返回这一天营业下来，最多有多少客户能够感到满意的数量。</p><blockquote><p>示例：</p><p>输入：customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3<br>输出：16 解释： 书店老板在最后 3 分钟保持冷静。 感到满意的最大客户数量 = 1 + 1 + 1 + 1 + 7 + 5 = 16.</p></blockquote><blockquote><p>提示：</p><p>1 &lt;= X &lt;= customers.length == grumpy.length &lt;= 20000 0 &lt;= customers[i]<br>&lt;= 1000 0 &lt;= grumpy[i] &lt;= 1</p></blockquote><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><ul><li>先求出老板不生气时候的顾客总数 然后遍历一次customer，i &lt; X就是刚开始取前 X 个大小的窗口先计算，然后接下来每次移动一个单位</li><li>每次窗口的计算可以基于上一个窗口的结果来计算 窗口右移，左边窗口出去一个元素，右边窗口进入一个元素</li><li>对于出窗口的元素，我们要判断在此时老板是否生气grumpy[i-X] == 1，因为只有生气的话，我们出窗口时候才需要减去他，如果不生气的话，就不用减去了</li><li>对于进入窗口的元素，我们也要判断是否老板生气grumpy[i] == 1，只有生气我们才需要加上此时的顾客temp += customers[i]; 最后的结果就是所有窗口中最大值的那个</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSatisfied</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; customers, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; grumpy, <span class="keyword">int</span> X)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> time = customers.size();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>,max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;time;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(grumpy[i]==<span class="number">0</span>)&#123;  </span><br><span class="line">                count += customers[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        max = count;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;time;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;X)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grumpy[i]==<span class="number">1</span>)&#123;</span><br><span class="line">                    count += customers[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(grumpy[i-X]==<span class="number">1</span>)&#123;</span><br><span class="line">                    count -= customers[i-X];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(grumpy[i]==<span class="number">1</span>)&#123;</span><br><span class="line">                    count += customers[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(max&lt;count)  max=count;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;今天，书店老板有一家店打算试营业 customers.length </summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode--766.托普利茨矩阵</title>
    <link href="http://example.com/2021/02/22/LeetCode-766-%E6%89%98%E6%99%AE%E5%88%A9%E8%8C%A8%E7%9F%A9%E9%98%B5/"/>
    <id>http://example.com/2021/02/22/LeetCode-766-%E6%89%98%E6%99%AE%E5%88%A9%E8%8C%A8%E7%9F%A9%E9%98%B5/</id>
    <published>2021-02-22T04:08:07.000Z</published>
    <updated>2021-02-22T04:22:47.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给你一个 m x n 的矩阵 matrix 。如果这个矩阵是托普利茨矩阵，返回 true ；否则，返回 false 。</p><p>如果矩阵上每一条由左上到右下的对角线上的元素都相同，那么这个矩阵是<strong>托普利茨矩阵</strong> 。</p><blockquote><p>示例 1：<br><img src="https://img-blog.csdnimg.cn/20210222121213355.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><blockquote><p>输入：matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]] 输出：true 解释： 在上述矩阵中, 其对角线为:<br>“[9]”, “[5, 5]”, “[1, 1, 1]”, “[2, 2, 2]”, “[3, 3]”, “[4]”。<br>各条对角线上的所有元素均相同, 因此答案是 True 。</p></blockquote><blockquote><p>示例 2：<br><img src="https://img-blog.csdnimg.cn/20210222121213353.jpg" alt="在这里插入图片描述"></p><p>输入：matrix = [[1,2],[2,2]] 输出：false 解释： 对角线 “[1, 2]” 上的元素不同。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">提示：</span><br><span class="line"></span><br><span class="line">m &#x3D;&#x3D; matrix.length</span><br><span class="line">n &#x3D;&#x3D; matrix[i].length</span><br><span class="line">1 &lt;&#x3D; m, n &lt;&#x3D; 20</span><br><span class="line">0 &lt;&#x3D; matrix[i][j] &lt;&#x3D; 99</span><br></pre></td></tr></table></figure><p>进阶：</p><p>如果矩阵存储在磁盘上，并且内存有限，以至于一次最多只能将矩阵的一行加载到内存中，该怎么办？<br>如果矩阵太大，以至于一次只能将不完整的一行加载到内存中，该怎么办？</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isToeplitzMatrix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> flag =<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.size();</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">if</span>(m == <span class="number">1</span> &amp;&amp; n == <span class="number">1</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(m == <span class="number">1</span>&amp;&amp; n == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//如果矩阵没有对角线则都是符合要求的</span></span><br><span class="line">        <span class="keyword">if</span>((m == <span class="number">1</span> &amp;&amp; n &gt; <span class="number">1</span>) || (m &gt; <span class="number">1</span> &amp;&amp; n == <span class="number">1</span>)) </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j] != matrix[i<span class="number">-1</span>][j<span class="number">-1</span>])&#123;</span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;给你一个 m x n 的矩阵 matrix 。如果这个矩阵是托普利茨</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LintCode—第一个只出现一次的字符</title>
    <link href="http://example.com/2020/10/17/LintCode%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6/"/>
    <id>http://example.com/2020/10/17/LintCode%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6/</id>
    <published>2020-10-17T07:30:16.000Z</published>
    <updated>2021-02-21T14:43:45.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><h3 id="209-第一个只出现一次的字符"><a href="#209-第一个只出现一次的字符" class="headerlink" title="209.第一个只出现一次的字符"></a>209.第一个只出现一次的字符</h3><p>给出一个字符串，找出第一个只出现一次的字符。</p><p>样例<br>样例 1:<br>    输入: “abaccdeff”<br>    输出:  ‘b’</p><pre><code>解释:&#39;b&#39; 是第一个出现一次的字符</code></pre><p>样例 2:<br>    输入: “aabccd”<br>    输出:  ‘b’</p><pre><code>解释:&#39;b&#39; 是第一个出现一次的字符</code></pre><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @param str: str: the given string</span></span><br><span class="line"><span class="comment">     * @return: char: the first unique character in a given string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">firstUniqChar</span><span class="params">(<span class="built_in">string</span> &amp;str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Write your code here</span></span><br><span class="line">        <span class="keyword">int</span> len = str.size();</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="comment">/* code */</span> </span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(str[i]==str[j])</span><br><span class="line">                    sum ++;</span><br><span class="line">                <span class="keyword">if</span>(sum&gt;<span class="number">1</span>) </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> str[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目要求&quot;&gt;&lt;a href=&quot;#题目要求&quot; class=&quot;headerlink&quot; title=&quot;题目要求&quot;&gt;&lt;/a&gt;题目要求&lt;/h2&gt;&lt;h3 id=&quot;209-第一个只出现一次的字符&quot;&gt;&lt;a href=&quot;#209-第一个只出现一次的字符&quot; class=&quot;header</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LintCode" scheme="http://example.com/tags/LintCode/"/>
    
  </entry>
  
  <entry>
    <title>LintCode—字符串查找</title>
    <link href="http://example.com/2020/10/16/LintCode%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/"/>
    <id>http://example.com/2020/10/16/LintCode%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/</id>
    <published>2020-10-16T07:30:16.000Z</published>
    <updated>2021-02-21T14:43:34.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><h3 id="13-字符串查找"><a href="#13-字符串查找" class="headerlink" title="13.字符串查找"></a>13.字符串查找</h3><p>对于一个给定的 source 字符串和一个 target 字符串，你应该在 source 字符串中找出 target 字符串出现的第一个位置(从0开始)。如果不存在，则返回 -1。</p><p>样例 1:<br>输入: source = “source” ， target = “target”<br>输出:-1<br>样例解释: 如果source里没有包含target的内容，返回-1</p><p>样例 2:<br>输入: source = “abcdabcdefg” ，target = “bcd”<br>输出: 1<br>样例解释: 如果source里包含target的内容，返回target在source里第一次出现的位置</p><p>挑战<br>O(n2)的算法是可以接受的。如果你能用O(n)的算法做出来那更加好。（提示：KMP）</p><p>说明<br>在面试中我是否需要实现KMP算法？</p><p>不需要，当这种问题出现在面试中时，面试官很可能只是想要测试一下你的基础应用能力。当然你需要先跟面试官确认清楚要怎么实现这个题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @param source: </span></span><br><span class="line"><span class="comment">     * @param target: </span></span><br><span class="line"><span class="comment">     * @return: return the index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> &amp;source, <span class="built_in">string</span> &amp;target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Write your code here</span></span><br><span class="line">        <span class="keyword">int</span> i, j;</span><br><span class="line">        <span class="keyword">int</span> lenh = source.length();</span><br><span class="line">        <span class="keyword">int</span> lenn =  target.length();</span><br><span class="line">        <span class="keyword">if</span> (lenn == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= lenh - lenn; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; lenn; j++) </span><br><span class="line">                <span class="keyword">if</span> (source[i + j] !=  target[j]) </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 匹配成功</span></span><br><span class="line">            <span class="keyword">if</span> (j == lenn)  </span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目要求&quot;&gt;&lt;a href=&quot;#题目要求&quot; class=&quot;headerlink&quot; title=&quot;题目要求&quot;&gt;&lt;/a&gt;题目要求&lt;/h2&gt;&lt;h3 id=&quot;13-字符串查找&quot;&gt;&lt;a href=&quot;#13-字符串查找&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LintCode" scheme="http://example.com/tags/LintCode/"/>
    
  </entry>
  
  <entry>
    <title>LintCode—两数之和&amp;落单的数</title>
    <link href="http://example.com/2020/10/15/LintCode%E2%80%94%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C&amp;%E8%90%BD%E5%8D%95%E7%9A%84%E6%95%B0/"/>
    <id>http://example.com/2020/10/15/LintCode%E2%80%94%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C&amp;%E8%90%BD%E5%8D%95%E7%9A%84%E6%95%B0/</id>
    <published>2020-10-15T07:30:16.000Z</published>
    <updated>2021-02-21T14:43:39.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><h3 id="56-两数之和"><a href="#56-两数之和" class="headerlink" title="56. 两数之和"></a>56. 两数之和</h3><p>给一个整数数组，找到两个数使得他们的和等于一个给定的数 target。</p><p>你需要实现的函数twoSum需要返回这两个数的下标, 并且第一个下标小于第二个下标。注意这里下标的范围是 0 到 n-1。</p><p>样例<br>Example1:<br>给出 numbers = [2, 7, 11, 15], target = 9, 返回 [0, 1].<br>Example2:<br>给出 numbers = [15, 2, 7, 11], target = 9, 返回 [1, 2].<br>挑战<br>给自己加点挑战</p><p>O(n)O(n) 空间复杂度，O(nlogn)O(nlogn) 时间复杂度，<br>O(n)O(n) 空间复杂度，O(n)O(n) 时间复杂度，<br>注意事项<br>你可以假设只有一组答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @param numbers: An array of Integer</span></span><br><span class="line"><span class="comment">     * @param target: target = numbers[index1] + numbers[index2]</span></span><br><span class="line"><span class="comment">     * @return: [index1 + 1, index2 + 1] (index1 &lt; index2)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;numbers, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write your code here</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numbers.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; numbers.size(); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((numbers[i] + numbers[j]) == target)</span><br><span class="line">&#123;</span><br><span class="line">a.push_back(i);</span><br><span class="line">a.push_back(j);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="82-落单的数"><a href="#82-落单的数" class="headerlink" title="82.落单的数"></a>82.落单的数</h3><p>给出 2 * n + 1个数字，除其中一个数字之外其他每个数字均出现两次，找到这个数字。</p><p>样例<br>样例 1:</p><p>输入：[1,1,2,2,3,4,4]<br>输出：3<br>解释：<br>仅3出现一次<br>样例 2:</p><p>输入：[0,0,1]<br>输出：1<br>解释：<br>仅1出现一次<br>挑战<br>一次遍历，常数级的额外空间复杂度</p><p>注意事项<br>n≤100</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @param A: An integer array</span></span><br><span class="line"><span class="comment">     * @return: An integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write your code here</span></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.size(); ++i)</span><br><span class="line">            ans ^= A[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>参与运算的两个值，如果两个相应bit位相同，则结果为0，否则为1。<br>即：0^0 = 0， 1^0 = 1， 0^1 = 1， 1^1 = 0<br>按位异或的3个特点:<br>(1) 0^0=0,0^1=1  0异或任何数＝任何数<br>(2) 1^0=1,1^1=0  1异或任何数－任何数取反<br>(3) 任何数异或自己＝把自己置0<br>思路：通过异或，相同的数结果为0，那么最后的结果一定是落单的数字。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目要求&quot;&gt;&lt;a href=&quot;#题目要求&quot; class=&quot;headerlink&quot; title=&quot;题目要求&quot;&gt;&lt;/a&gt;题目要求&lt;/h2&gt;&lt;h3 id=&quot;56-两数之和&quot;&gt;&lt;a href=&quot;#56-两数之和&quot; class=&quot;headerlink&quot; title=&quot;56.</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LintCode" scheme="http://example.com/tags/LintCode/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习（一）</title>
    <link href="http://example.com/2020/09/20/JavaWeb%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2020/09/20/JavaWeb%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-09-20T07:30:16.000Z</published>
    <updated>2021-02-21T10:40:19.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><h3 id="1-1、WEB开发的相关知识"><a href="#1-1、WEB开发的相关知识" class="headerlink" title="1.1、WEB开发的相关知识"></a>1.1、WEB开发的相关知识</h3><p>　　WEB，在英语中web即表示网页的意思，它用于表示Internet主机上供外界访问的资源。<br>　　Internet上供外界访问的Web资源分为：</p><ol><li><strong>静态web资源（如html 页面）：指web页面中供人们浏览的数据始终是不变。</strong></li><li><strong>动态web资源：指web页面中供人们浏览的数据是由程序产生的，不同时间点访问web页面看到的内容各不相同。</strong></li></ol><ul><li>静态web资源开发技术：Html</li><li>常用动态web资源开发技术：JSP/Servlet、ASP、PHP等</li><li>在Java中，动态web资源开发技术统称为Javaweb。</li></ul><h3 id="1-2、WEB应用程序"><a href="#1-2、WEB应用程序" class="headerlink" title="1.2、WEB应用程序"></a>1.2、WEB应用程序</h3><p>　WEB应用程序指供浏览器访问的程序，通常也简称为web应用。例如有a.html 、b.html…..多个web资源，这多个web资源用于对外提供服务，此时应把这多个web资源放在一个目录中，以组成一个web应用（或web应用程序）<br>　　一个web应用由多个静态web资源和动态web资源组成，如:html、css、js文件，Jsp文件、java程序、支持jar包、配置文件等等。<br>　　<strong>Web应用开发好后，若想供外界访问，需要把web应用所在目录交给web服务器管理，这个过程称之为虚似目录的映射。</strong></p><h3 id="1-3、WEB发展史"><a href="#1-3、WEB发展史" class="headerlink" title="1.3、WEB发展史"></a>1.3、WEB发展史</h3><p>　　WEB发展的两个阶段：静态、动态</p><h3 id="1-4、静态WEB"><a href="#1-4、静态WEB" class="headerlink" title="1.4、静态WEB"></a>1.4、静态WEB</h3><p>　　<em>htm、</em>html，这些是网页的后缀，如果现在在一个服务器上直接读取这些内容，那么意味着是把这些网页的内容通过网络服务器展现给用户。整个静态WEB操作的过程图如下：</p><p><img src="https://img-blog.csdnimg.cn/20191106135326280.png" alt="在这里插入图片描述">　　在静态WEB程序中，客户端使用WEB浏览器（IE、FireFox等）经过网络(Network)连接到服务器上，使用HTTP协议发起一个请求（Request），告诉服务器我现在需要得到哪个页面，所有的请求交给WEB服务器，之后WEB服务器根据用户的需要，从文件系统（存放了所有静态页面的磁盘）取出内容。之后通过WEB服务器返回给客户端，客户端接收到内容之后经过浏览器渲染解析，得到显示的效果。</p><p>　　<strong>静态WEB中存在以下几个缺点：</strong></p><p>　　<strong>1. Web页面中的内容无法动态更新，所有的用户每时每刻看见的内容和最终效果都是一样的。</strong></p><p>　　为了可以让静态的WEB的显示更加好看，可以加入了JavaScript以完成一些页面上的显示特效，但是这些特效都是在客户端上借助于浏览器展现给用户的，所以在服务器上本身并没有任何的变化。</p><p>　实现静态WEB客户端动态效果的手段：</p><ul><li>JavaScript</li><li>VBScript<br>在实际的开发中JavaScript使用得最多。</li></ul><p>　　<strong>2、静态WEB无法连接数据库，无法实现和用户的交互。</strong></p><p>　　使用数据库保存数据是现在大多数系统的选择，因为数据库中可以方便地管理数据，增删改查操作可以使用标准的SQL语句完成。</p><h3 id="1-5、动态WEB"><a href="#1-5、动态WEB" class="headerlink" title="1.5、动态WEB"></a>1.5、动态WEB</h3><p>　　所谓的动态不是指页面会动，主要的特性的是：“WEB的页面展示效果因时因人而变”，而且动态WEB具有交互性，WEB的页面的内容可以动态更新。整个动态WEB操作的过程图如下：</p><p><img src="https://img-blog.csdnimg.cn/20191106135813372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>　　动态WEB中，程序依然使用客户端和服务端，客户端依然使用浏览器（IE、FireFox等），通过网络(Network)连接到服务器上，使用HTTP协议发起请求（Request），现在的所有请求都先经过一个WEB Server Plugin（服务器插件）来处理，此插件用于区分是请求的是静态资源(<em>.htm或者是</em>.htm)还是动态资源。</p><p>　　如果WEB Server Plugin发现客户端请求的是静态资源(<em>.htm或者是</em>.htm)，则将请求直接转交给WEB服务器，之后WEB服务器从文件系统中取出内容，发送回客户端浏览器进行解析执行。</p><p>　　如果WEB Server Plugin发现客户端请求的是动态资源（*.jsp、*.asp/<em>.aspx、</em>.php），则先将请求转交给WEB Container(WEB容器)，在WEB Container中连接数据库，从数据库中取出数据等一系列操作后动态拼凑页面的展示内容，拼凑页面的展示内容后，把所有的展示内容交给WEB服务器，之后通过WEB服务器将内容发送回客户端浏览器进行解析执行。</p><h3 id="1-6、动态WEB应用的实现手段"><a href="#1-6、动态WEB应用的实现手段" class="headerlink" title="1.6、动态WEB应用的实现手段"></a>1.6、动态WEB应用的实现手段</h3><p>　　动态WEB现在的实现手段非常多，较为常见的有以下几种：</p><ul><li>Microsoft ASP、ASP.NET</li><li>PHP</li><li>JAVA Servlet/JSP</li></ul><ol><li>Microsoft ASP、ASP.NET<br>　　微软公司动态WEB开发是比较早的，而且最早在国内最流行的是ASP。ASP就是在HTML语言之中增加了VB脚本，但是标准的开发应用应该是使用ASP+COM，但是实际情况来看，在开发ASP的时候基本上都在一个页面中写上成百上千的代码，页面代码极其混乱。</li></ol><p>　　ASP本身有开发平台的限制：Windows+IIS+SQL Server/Access，ASP只能运行在Windows操作系统上，ASP现在基本上已经淘汰，现在基本上都是使用ASP.NET进行开发，ASP.NET在性能有了很大的改善，而且开发迅速，但是依然受限于平台。ASP.NET中主要是使用C#语言。</p><ol start="2"><li><p>PHP<br>　　PHP开发速度很快，功能强大，跨平台(平台指的就是运行的操作系统)，而且代码也简单。</p></li><li><p>Servlet/JSP<br>　　这是SUN公司(SUN现在已经被Oracle公司收购)主推的B/S架构的实现语言，是基于JAVA语言发展起来的，因为JAVA语言足够简单，而且很干净。</p></li></ol><p>　　Servlet/JSP技术的性能也是非常高的，不受平台的限制，各个平台基本上都可以使用。而且在运行中是使用多线程的处理方式，所以性能非常高。</p><p>　　SUN公司最早推出的WEB技术推出的是Servlet程序，Servlet程序本身使用的时候有一些问题，所有的程序是采用JAVA代码+HTML的方式编写的，即，要使用JAVA输出语句，一行一行地输出所有的HTML代码，之后，SUN公司受到了ASP的启发，发展出了JSP(Java Server Page)，JSP某些代码的编写效果与ASP是非常相似的。这样可以很方便地使一些ASP程序员转向JSP的学习，加大市场的竞争力度。</p><h2 id="二、WEB服务器"><a href="#二、WEB服务器" class="headerlink" title="二、WEB服务器"></a>二、WEB服务器</h2><h3 id="2-1、WEB服务器简介"><a href="#2-1、WEB服务器简介" class="headerlink" title="2.1、WEB服务器简介"></a>2.1、WEB服务器简介</h3><p>　　1、Web服务器是指驻留于因特网上某种类型计算机的程序，是可以向发出请求的浏览器提供文档的程序。当Web浏览器（客户端）连到服务器上并请求文件时，服务器将处理该请求并将文件反馈到该浏览器上，附带的信息会告诉浏览器如何查看该文件（即文件类型）。<br><img src="https://img-blog.csdnimg.cn/201911061359152.jpg" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2019110613593337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>　　2、服务器是一种被动程序：只有当Internet上运行在其他计算机中的浏览器发出请求时，服务器才会响应。</p><h3 id="2-2、常见的Web服务器介绍"><a href="#2-2、常见的Web服务器介绍" class="headerlink" title="2.2、常见的Web服务器介绍"></a>2.2、常见的Web服务器介绍</h3><ol><li><p>WebLogic<br>　　WebLogic是美国bea公司出品的一个application server。BEA WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。是目前应用最广泛的Web服务器，支持J2EE规范，而且不断的完善以适应新的开发要求。</p></li><li><p>WebSphere<br>　　WebSphere Application Server 是一种功能完善、开放的Web应用程序服务器，是IBM公司电子商务计划的核心部分，它是基于 Java 的应用环境，用于建立、部署和管理 Internet 和 Intranet Web 应用程序。这一整套产品进行了扩展，以适应 Web应用程序服务器的需要，范围从简单到高级直到企业级。</p></li></ol><ol start="3"><li>Tomcat<br>　　TomcatTomcat是一个实现了JAVA EE标准的最小的WEB服务器，是Apache 软件基金会的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。因为Tomcat 技术先进、性能稳定，而且开源免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。学习JavaWeb开发一般都使用Tomcat服务器，该服务器支持全部JSP以及Servlet规范。</li></ol><ol start="4"><li>IIS<br>　　Microsoft的Web服务器产品为Internet Information Services （IIS），IIS 是允许在公共Intranet或Internet上发布信息的Web服务器。ⅡS是目前最流行的Web服务器产品之一，很多著名的网站都是建立在ⅡS的平 台上。IIS提供了一个图形界面的管理工具，称为Internet信息服务管理器，可用于监视配置和控制Internet服务。　　<pre><code> IIS是一种Web服务组件，其中包括Web服务器、FTP服务器、NNTP服务器和SMTP服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网）上发布信息成了一件很容易的事。它提供ISAPI(Intranet Server API）作为扩展Web服务器功能的编程接口；同时，它还提供一个Internet数据库连接器，可以实现对数据库的查询和更新。 </code></pre>学习web开发，需要先安装一台web服务器，然后再在web服务器中开发相应的web资源，供用户使用浏览器访问。</li></ol><h2 id="三、搭建JavaWeb应用开发环境——Tomcat服务器"><a href="#三、搭建JavaWeb应用开发环境——Tomcat服务器" class="headerlink" title="三、搭建JavaWeb应用开发环境——Tomcat服务器"></a>三、搭建JavaWeb应用开发环境——Tomcat服务器</h2><h3 id="3-1、疑问：学习web开发，为什么必须要先装一个WEB服务器？"><a href="#3-1、疑问：学习web开发，为什么必须要先装一个WEB服务器？" class="headerlink" title="3.1、疑问：学习web开发，为什么必须要先装一个WEB服务器？"></a>3.1、疑问：学习web开发，为什么必须要先装一个WEB服务器？</h3><p>　　在本地计算机上随便创建一个web页面，用户是无法访问到的，但是如果启动tomcat服务器，把web页面放在tomcat服务器中，用户就可以访问了。这说明什么问题？<br>　　1、不管什么web资源，想被远程计算机访问，都必须有一个与之对应的网络通信程序，当用户来访问时，这个网络通信程序读取web资源数据，并把数据发送给来访者。<br>　　2、WEB服务器就是这样一个程序，它用于完成底层网络通迅。使用这些服务器，We应用的开发者只需要关注web资源怎么编写，而不需要关心资源如何发送到客户端手中，从而极大的减轻了开发者的开发工作量。</p><h3 id="3-2、下载和安装Tomcat服务器"><a href="#3-2、下载和安装Tomcat服务器" class="headerlink" title="3.2、下载和安装Tomcat服务器"></a>3.2、下载和安装Tomcat服务器</h3><p>　　<strong>Tomcat官方站点：<a class="link"   href="http://jakarta.apache.org/" >http://jakarta.apache.org<i class="fas fa-external-link-alt"></i></a></strong></p><p>　　<strong>下载Tomcat安装程序包：<a class="link"   href="http://tomcat.apache.org/" >http://tomcat.apache.org/<i class="fas fa-external-link-alt"></i></a></strong></p><p>　　<br><img src="https://img-blog.csdnimg.cn/20191106140300176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> 　　</p><ul><li><p>tar.gz文件是Linux操作系统下的安装版本</p></li><li><p>exe文件是Windows系统下的安装版本</p></li><li><p>zip文件是Windows系统下的压缩版本</p><p>　　下载完成后，得到的是一个压缩包，将压缩包解压就可以完成Tomcat服务器的安装。</p></li></ul><p>　　</p><p>　　将压缩包解压后，就完成了Tomcat服务器的安装。</p><p>　　</p><h3 id="3-3、启动和测试Tomcat服务器"><a href="#3-3、启动和测试Tomcat服务器" class="headerlink" title="3.3、启动和测试Tomcat服务器"></a>3.3、启动和测试Tomcat服务器</h3><h4 id="用终端（Terminal）直接打开Tomcat了"><a href="#用终端（Terminal）直接打开Tomcat了" class="headerlink" title="用终端（Terminal）直接打开Tomcat了"></a>用终端（Terminal）直接打开Tomcat了</h4><ol><li>进入Tomcat的bin目录下：<br>终端输入cd /Library/Tomcat/bin ，输完回车</li></ol><p><code>cd /Library/Tomcat/bin </code></p><p>  也可以打开Tomcat文件夹，把bin文件夹直接拖拉到终端，当然前提是先输入cd+空格</p><ol start="2"><li>授权bin目录下的所有操作：终端输入sudo chmod 755 *.sh，输完回车</li></ol><p><code>sudo chmod 755 *.sh</code></p><ol start="3"><li><p>这时要输入密码，输完回车</p></li><li><p>这时候就可以开启Tomcat了，终端输入sudo sh ./startup.sh，输完回车</p></li></ol><p><code>sudo sh ./startup.sh</code></p><p>成功后的终端是这样的</p><p><img src="https://img-blog.csdnimg.cn/20191106140841817.png" alt="在这里插入图片描述"><br>三、到浏览器输入网址localhost，若出现了下面的画面就证明成功了<br><img src="https://img-blog.csdnimg.cn/20191106140849442.png" alt="在这里插入图片描述"></p><p>四、关闭Tomcat，用终端输入sh ./shutdown.sh，回车即可关闭</p><p>说明：</p><ul><li>sudo为系统超级管理员权限。</li><li>chmod 改变一个或多个文件的存取模式。</li><li>755代表用户对该文件拥有读、写、执行的权限，同组的其他人员拥有执行和读的权限，没有写的权限，其它用户的权限和同组人员一样。</li><li>777代表，user,group ,others ,都有读写和可执行权限。</li><li>chmod -R 777 folername,获取文件夹权限。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、基本概念&quot;&gt;&lt;a href=&quot;#一、基本概念&quot; class=&quot;headerlink&quot; title=&quot;一、基本概念&quot;&gt;&lt;/a&gt;一、基本概念&lt;/h2&gt;&lt;h3 id=&quot;1-1、WEB开发的相关知识&quot;&gt;&lt;a href=&quot;#1-1、WEB开发的相关知识&quot; class=&quot;</summary>
      
    
    
    
    <category term="JavaWeb" scheme="http://example.com/categories/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>实验项目四：完全分布式搭建</title>
    <link href="http://example.com/2020/04/17/%E5%AE%9E%E9%AA%8C%E9%A1%B9%E7%9B%AE%E5%9B%9B%EF%BC%9A%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2020/04/17/%E5%AE%9E%E9%AA%8C%E9%A1%B9%E7%9B%AE%E5%9B%9B%EF%BC%9A%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/</id>
    <published>2020-04-17T07:30:16.000Z</published>
    <updated>2021-02-21T14:44:34.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验内容与步骤"><a href="#实验内容与步骤" class="headerlink" title="实验内容与步骤"></a>实验内容与步骤</h1><h2 id="1-配置网络环境："><a href="#1-配置网络环境：" class="headerlink" title="1. 配置网络环境："></a>1. 配置网络环境：</h2><p>本次实验用的是Cent OS 6.5 minimal版本，相应的版本可以在官网上下载。<br>首先安装：<br>我是用的是parallels desktop 来安装，安装步骤详见：<br>链接: <a class="link"   href="https://blog.csdn.net/weixin_43491622/article/details/104415928" >Mac os上配置PD虚拟机，使其共享网络访问公网<i class="fas fa-external-link-alt"></i></a>.</p><p><img src="https://img-blog.csdnimg.cn/20200310214153424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code>进行网络环境的相关配置：<br><img src="https://img-blog.csdnimg.cn/20200310215021166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>设置DNS解析（不同的系统不一样）：<br><code>vi /etc/resolv.conf</code><br><img src="https://img-blog.csdnimg.cn/20200310215139846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>service network restart</code>命令，重启网络服务。<br>测试网络：<br><img src="https://img-blog.csdnimg.cn/20200310215635846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>ping自己和外网都能通，网络配置成功。</p><h2 id="2-时间同步ntp："><a href="#2-时间同步ntp：" class="headerlink" title="2. 时间同步ntp："></a>2. 时间同步ntp：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ntp ntpdate</span><br><span class="line"> ntpdate cn.pool.ntp.org</span><br></pre></td></tr></table></figure><p> 以上命令进行时间的同步：<br><code> date</code>查看当前时间<img src="https://img-blog.csdnimg.cn/20200310220513268.png" alt="在这里插入图片描述"></p><h2 id="3-克隆系统："><a href="#3-克隆系统：" class="headerlink" title="3. 克隆系统："></a>3. 克隆系统：</h2><p>前两步做好了之后，可以关机，然后将系统进行克隆，因为需要配置Hadoop的完全分布式搭建，所以克隆了两个主机。</p><p><img src="https://img-blog.csdnimg.cn/20200310220855795.png" alt="在这里插入图片描述"><br>主机克隆后，需要将网络环境重新配置一下，将硬件地址和UUID删除，并将IP地址更换，之后删除Linux物理地址绑定的文件（该文件会在操作系统重启并生成物理地址以后将物理地址绑定到IP上）<br><code>rm -rf /etc/udev/rules.d/70-persistent-net.rules</code></p><p>当然，也可以更改一下主机名称：<br><code>vi /etc/sysconfig/network</code><br>将HOSTNAME=后面的内容更改成需要的名称即可。</p><p>修改网络映射hosts<br>vim /etc/hosts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">192.168.100.132 master</span><br><span class="line">192.168.100.133 slave1</span><br><span class="line">192.168.100.134 slave2</span><br></pre></td></tr></table></figure><p>最后需要重启一下系统：<br><code>shutdown -r now </code>或者<code>init 6 </code></p><p>最后的效果：</p><p><img src="https://img-blog.csdnimg.cn/20200310221352201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-免秘钥操作："><a href="#4-免秘钥操作：" class="headerlink" title="4. 免秘钥操作："></a>4. 免秘钥操作：</h2><ol><li><p>生成密钥<br>ssh-keygen -t rsa # 一路回车</p></li><li><p>将集群中的所有公钥集中到某台机器，生成免密授权登录文件<br>bigdata22:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub bigdata11:/root/.ssh/22</span><br></pre></td></tr></table></figure><p>bigdata33:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub bigdata11:/root/.ssh/33</span><br></pre></td></tr></table></figure><p>bigdata11:<br>切换到根目录下的.ssh文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line">cat 22 &gt;&gt; authorized_keys</span><br><span class="line">cat 33 &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>对文件进行授权：<br><code>chmod 600 authorized_keys</code><br>必须改，不然不能免密登录</p></li><li><p>将授权列表分发给bigdata22和bigdata33:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp ~/.ssh/authorized_keys bigdata22:/root/.ssh/authorized_keys</span><br><span class="line">scp ~/.ssh/authorized_keys bigdata33:/root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200310222853849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-Jdk和Hadoop安装配置："><a href="#5-Jdk和Hadoop安装配置：" class="headerlink" title="5. Jdk和Hadoop安装配置："></a>5. Jdk和Hadoop安装配置：</h2><p>利用ForkLift将所需要的jdk文件以及Hadoop文件拷到三个主机上：<br><img src="https://img-blog.csdnimg.cn/20200310222950939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以先配好一台机器中的配置文件，再将软件复制到其他机器，减少配置的工作量。</p></li></ol><p>rpm -ivh 命令安装rpm包，安装默认路径：<br><img src="https://img-blog.csdnimg.cn/20200310223129491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>配置环境变量:<br><code>vi   .bash_profile</code></p><p><img src="https://img-blog.csdnimg.cn/20200310223306287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>需要<code>source .bash_profile</code>加载一下。<br>测试环境JDK：<br><img src="https://img-blog.csdnimg.cn/2020031022352216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>HADOOP</strong> 安装配置：</p><ol><li>安装源码包用tar -zxvf<br>Cd  /opt/software     tar  -zxvf hadoop-2.5.1_x64.tar.gz </li><li>配置环境变量<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vi /root/.bash_profile</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.7.0_79</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/opt/software/hadoop-2.5.1</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200310223829377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>加载环境变量<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Source  /root/.bash_profile  </span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2020031022384327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><h2 id="6-core-site-xml，hdfs-site-xml，mapred-site-xml，yarn-site-xml配置"><a href="#6-core-site-xml，hdfs-site-xml，mapred-site-xml，yarn-site-xml配置" class="headerlink" title="6. core-site.xml，hdfs-site.xml，mapred-site.xml，yarn-site.xml配置:"></a>6. core-site.xml，hdfs-site.xml，mapred-site.xml，yarn-site.xml配置:</h2><ol><li><p>hadoop-env.sh 和 yarn-env.sh 中将Java的环境变量添加：<br><img src="https://img-blog.csdnimg.cn/20200310224737376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200310224743760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>core-site.xml配置：<br><img src="https://img-blog.csdnimg.cn/20200310225323905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol><p>代码片段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hdfs://master:9000&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;默认的文件系统&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 8020 9000 都是HDFS的RPC端口，都可以 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;/hadoop/hadoop-2.6.5/data&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>hdfs-site.xml配置：</li></ol><p><img src="https://img-blog.csdnimg.cn/20200310225054964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码片段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;2&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;数据块备份数&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.permissions.enabled&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;<span class="literal">false</span>&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;关闭权限检查&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>mapred-site.xml配置：</li></ol><p><img src="https://img-blog.csdnimg.cn/20200310225229886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码片段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;指定运行mapreduce的框架&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>yarn-site.xml配置：<br><img src="https://img-blog.csdnimg.cn/20200310224906117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码片段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;指定namenode节点的地址&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;NodeManager上运行的附属服务&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.nodemanager.aux-services.mapreduce_shuffle.class&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;指定shuffle类&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;是否启用日志聚合，将slave节点的日志聚合至master&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li><p>将配置好的文件包分别发至其余两个主机上：<br><code>scp -r /opt/software/hadoop-2.5.1 bigdata22:/opt/software</code><br><code>scp -r /opt/software/hadoop-2.5.1 bigdata33:/opt/software</code><br><img src="https://img-blog.csdnimg.cn/20200310230427429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>更改bigdata11上的slaves文件：</p></li></ol><p><img src="https://img-blog.csdnimg.cn/202003102305260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-格式化启动节点"><a href="#7-格式化启动节点" class="headerlink" title="7. 格式化启动节点:"></a>7. 格式化启动节点:</h2><p>启动hadoop<br><code>hadoop namenode -format</code><br><img src="https://img-blog.csdnimg.cn/20200310230757332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>启动hdfs<br><code>start-dfs.sh</code><br><img src="https://img-blog.csdnimg.cn/20200310230822500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>启动yarn<br><code>start-yarn.sh</code><br><img src="https://img-blog.csdnimg.cn/20200310230918209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查看一下状态：</p><p><img src="https://img-blog.csdnimg.cn/2020031023221132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="8-web访问测试"><a href="#8-web访问测试" class="headerlink" title="8. web访问测试:"></a>8. web访问测试:</h2><ul><li>HDFS的web端: <a class="link"   href="http://master:50070/" >http://master:50070<i class="fas fa-external-link-alt"></i></a><br><img src="https://img-blog.csdnimg.cn/20200310232219213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200310232226715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>MapReduce的web端: <a class="link"   href="http://master:8088/" >http://master:8088<i class="fas fa-external-link-alt"></i></a></li></ul><p><img src="https://img-blog.csdnimg.cn/20200310232233946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>成功访问，环境搭建完成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实验内容与步骤&quot;&gt;&lt;a href=&quot;#实验内容与步骤&quot; class=&quot;headerlink&quot; title=&quot;实验内容与步骤&quot;&gt;&lt;/a&gt;实验内容与步骤&lt;/h1&gt;&lt;h2 id=&quot;1-配置网络环境：&quot;&gt;&lt;a href=&quot;#1-配置网络环境：&quot; class=&quot;header</summary>
      
    
    
    
    <category term="实验" scheme="http://example.com/categories/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="实验" scheme="http://example.com/tags/%E5%AE%9E%E9%AA%8C/"/>
    
    <category term="数据" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>实验项目三：java api访问hdfs</title>
    <link href="http://example.com/2020/04/14/%E5%AE%9E%E9%AA%8C%E9%A1%B9%E7%9B%AE%E4%B8%89%EF%BC%9Ajava%20api%E8%AE%BF%E9%97%AEhdfs/"/>
    <id>http://example.com/2020/04/14/%E5%AE%9E%E9%AA%8C%E9%A1%B9%E7%9B%AE%E4%B8%89%EF%BC%9Ajava%20api%E8%AE%BF%E9%97%AEhdfs/</id>
    <published>2020-04-14T07:30:16.000Z</published>
    <updated>2021-02-21T14:44:58.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验内容与步骤"><a href="#实验内容与步骤" class="headerlink" title="实验内容与步骤"></a>实验内容与步骤</h1><h2 id="1-从linux拷贝整个hadoop压缩jar包"><a href="#1-从linux拷贝整个hadoop压缩jar包" class="headerlink" title="1. 从linux拷贝整个hadoop压缩jar包"></a>1. 从linux拷贝整个hadoop压缩jar包</h2><p>使用ForkLift将hadoop文件全部拷出来。<br><img src="https://img-blog.csdnimg.cn/20200309090307324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将需要用到的jar包放在一起。（需要的是<code>share/hadoop/common</code>下的三个包，<code>share/hadoop/common/lib</code>文件下全部的包，以及<code>share/hadoop/hdfs</code>下的三个包，以及<code>share/hadoop/hdfs/lib</code>中的包）<br><img src="https://img-blog.csdnimg.cn/202003090917419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-从linux拷出配置文件可以访问hdfs"><a href="#2-从linux拷出配置文件可以访问hdfs" class="headerlink" title="2. 从linux拷出配置文件可以访问hdfs"></a>2. 从linux拷出配置文件可以访问hdfs</h2><p>将<code>core-site.xml</code>和<code>hdfs-site.xml``log4j.properties</code>文件拷出来：<br><img src="https://img-blog.csdnimg.cn/2020030909185614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>core-site.xml文件需要更改一下：<br>将黄线的部分改成自己的IP，然后再加上后面的配置就可以。<br><img src="https://img-blog.csdnimg.cn/20200309093802616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-使用java开发工具编写java代码"><a href="#3-使用java开发工具编写java代码" class="headerlink" title="3. 使用java开发工具编写java代码"></a>3. 使用java开发工具编写java代码</h2><p>简单的配置idea：<br>将第二步导出的文件放到src内，第一步导出的hadoop文件夹直接add as library<br><img src="https://img-blog.csdnimg.cn/20200309092157971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>简单测试一下：<br><img src="https://img-blog.csdnimg.cn/20200309092352740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到，在hadoop上成功创建了文件夹。<br><img src="https://img-blog.csdnimg.cn/20200309092411388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-使用Configuration-类，Path，FileSystem对象完成上传代码"><a href="#4-使用Configuration-类，Path，FileSystem对象完成上传代码" class="headerlink" title="4. 使用Configuration 类，Path，FileSystem对象完成上传代码"></a>4. 使用Configuration 类，Path，FileSystem对象完成上传代码</h2><p><img src="https://img-blog.csdnimg.cn/20200309092458481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-上传文件测试50070测试"><a href="#5-上传文件测试50070测试" class="headerlink" title="5. 上传文件测试50070测试"></a>5. 上传文件测试50070测试</h2><p>成功上传文件。<br><img src="https://img-blog.csdnimg.cn/20200309092511436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-使用Configuration-类，Path，FileSystem对象完成下载代码"><a href="#6-使用Configuration-类，Path，FileSystem对象完成下载代码" class="headerlink" title="6. 使用Configuration 类，Path，FileSystem对象完成下载代码"></a>6. 使用Configuration 类，Path，FileSystem对象完成下载代码</h2><p><img src="https://img-blog.csdnimg.cn/20200309092539710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-查看下载文件是否存在"><a href="#7-查看下载文件是否存在" class="headerlink" title="7. 查看下载文件是否存在"></a>7. 查看下载文件是否存在</h2><p>可以看到文件也成功下载了。<br><img src="https://img-blog.csdnimg.cn/20200309092609413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>以下为本次的实验代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itshixun.hdfs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownLoad</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        uploadFile();</span><br><span class="line">        downloadFile();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileSystem fs = FileSystem.get(conf);</span><br><span class="line">            <span class="comment">//定义文件的路径和上传的路径</span></span><br><span class="line">            Path src = <span class="keyword">new</span> Path(<span class="string">&quot;/Users/sunyumeng/readme.txt&quot;</span>);</span><br><span class="line">            Path dest = <span class="keyword">new</span> Path(<span class="string">&quot;/ss/README.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//从本地上传文件到服务器</span></span><br><span class="line">            fs.copyFromLocalFile(src, dest);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">downloadFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileSystem fs = FileSystem.get(conf);</span><br><span class="line">            <span class="comment">//定义下载文件的路径和本地下载路径</span></span><br><span class="line">            Path src = <span class="keyword">new</span> Path(<span class="string">&quot;/ss/README.txt&quot;</span>);</span><br><span class="line">            Path dest = <span class="keyword">new</span> Path(<span class="string">&quot;/Users/sunyumeng/READMEtest.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//从服务器下载文件到本地</span></span><br><span class="line">            fs.copyToLocalFile(src, dest);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实验内容与步骤&quot;&gt;&lt;a href=&quot;#实验内容与步骤&quot; class=&quot;headerlink&quot; title=&quot;实验内容与步骤&quot;&gt;&lt;/a&gt;实验内容与步骤&lt;/h1&gt;&lt;h2 id=&quot;1-从linux拷贝整个hadoop压缩jar包&quot;&gt;&lt;a href=&quot;#1-从linux拷</summary>
      
    
    
    
    <category term="实验" scheme="http://example.com/categories/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="大数据" scheme="http://example.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="实验" scheme="http://example.com/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>实验项目二：伪分布式环境搭建</title>
    <link href="http://example.com/2020/04/10/%E5%AE%9E%E9%AA%8C%E9%A1%B9%E7%9B%AE%E4%BA%8C%EF%BC%9A%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2020/04/10/%E5%AE%9E%E9%AA%8C%E9%A1%B9%E7%9B%AE%E4%BA%8C%EF%BC%9A%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2020-04-10T07:30:16.000Z</published>
    <updated>2021-02-21T14:45:14.861Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200306103439669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="实验内容与步骤"><a href="#实验内容与步骤" class="headerlink" title="实验内容与步骤"></a>实验内容与步骤</h1><h2 id="1-配置hadoop下的etc-hadoop-core-site-xml"><a href="#1-配置hadoop下的etc-hadoop-core-site-xml" class="headerlink" title="1. 配置hadoop下的etc/hadoop/core-site.xml"></a>1. 配置hadoop下的etc/hadoop/core-site.xml</h2><p>切换到etc/hadoop目录下，对core-site.xml进行编辑</p><p><code>vi core-site.xml</code></p><p>进行以下的配置：<br><img src="https://img-blog.csdnimg.cn/20200306104235338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-配置-hdfs-site-xml"><a href="#2-配置-hdfs-site-xml" class="headerlink" title="2. 配置 hdfs-site.xml"></a>2. 配置 hdfs-site.xml</h2><p><code>vi hdfs-site.xml</code><br><img src="https://img-blog.csdnimg.cn/20200306104638782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-格式hdfs"><a href="#3-格式hdfs" class="headerlink" title="3. 格式hdfs"></a>3. 格式hdfs</h2><p><code>hdfs namenode -format</code><br><img src="https://img-blog.csdnimg.cn/20200306104911599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-启动hadoop-namenode-调用sbin里的命令"><a href="#4-启动hadoop-namenode-调用sbin里的命令" class="headerlink" title="4. 启动hadoop namenode(调用sbin里的命令)"></a>4. 启动hadoop namenode(调用sbin里的命令)</h2><p><code>start-dfs.sh</code><br> <img src="https://img-blog.csdnimg.cn/20200306110346152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-Jps-命令-发现没有namenode节点"><a href="#5-Jps-命令-发现没有namenode节点" class="headerlink" title="5. Jps 命令 发现没有namenode节点"></a>5. Jps 命令 发现没有namenode节点</h2><p><img src="https://img-blog.csdnimg.cn/20200306111100827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>解决办法：</strong><br>本机没有对自己免密码  pub写入 authorized文件里即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@masternode1 ~]<span class="comment"># cd .ssh</span></span><br><span class="line">[root@masternode1 .ssh]<span class="comment"># ls</span></span><br><span class="line">authorized_keys  id_rsa  id_rsa.pub  known_hosts</span><br><span class="line">[root@masternode1 .ssh]<span class="comment"># cat id_rsa</span></span><br><span class="line">id_rsa      id_rsa.pub  </span><br><span class="line">[root@masternode1 .ssh]<span class="comment"># cat id_rsa.pub &gt;&gt; authorized_keys </span></span><br></pre></td></tr></table></figure><h2 id="6-ssh-本机IP地址测试不用密码"><a href="#6-ssh-本机IP地址测试不用密码" class="headerlink" title="6. ssh 本机IP地址测试不用密码"></a>6. ssh 本机IP地址测试不用密码</h2><p><img src="https://img-blog.csdnimg.cn/20200306111630957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-格式化"><a href="#7-格式化" class="headerlink" title="7. 格式化"></a>7. 格式化</h2><p><code>hdfs namenode -format</code><br><img src="https://img-blog.csdnimg.cn/20200306111819736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="8-查看结果地址http-10-211-55-10-50070"><a href="#8-查看结果地址http-10-211-55-10-50070" class="headerlink" title="8. 查看结果地址http://10.211.55.10:50070/"></a>8. 查看结果地址<a class="link"   href="http://10.211.55.10:50070/" >http://10.211.55.10:50070/<i class="fas fa-external-link-alt"></i></a></h2><p><img src="https://img-blog.csdnimg.cn/20200306112253328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>访问成功，此时已有namenode结点。<br><img src="https://img-blog.csdnimg.cn/20200306112327596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200306103439669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM</summary>
      
    
    
    
    <category term="实验" scheme="http://example.com/categories/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="大数据" scheme="http://example.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="实验" scheme="http://example.com/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>实验项目一：免秘钥登录</title>
    <link href="http://example.com/2020/04/08/%E5%AE%9E%E9%AA%8C%E9%A1%B9%E7%9B%AE%E4%B8%80%EF%BC%9A%E5%85%8D%E7%A7%98%E9%92%A5%E7%99%BB%E5%BD%95/"/>
    <id>http://example.com/2020/04/08/%E5%AE%9E%E9%AA%8C%E9%A1%B9%E7%9B%AE%E4%B8%80%EF%BC%9A%E5%85%8D%E7%A7%98%E9%92%A5%E7%99%BB%E5%BD%95/</id>
    <published>2020-04-08T07:30:16.000Z</published>
    <updated>2021-02-21T14:44:05.329Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200305091516937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="实验内容与步骤"><a href="#实验内容与步骤" class="headerlink" title="实验内容与步骤"></a>实验内容与步骤</h1><h2 id="1-关闭防火墙"><a href="#1-关闭防火墙" class="headerlink" title="1. 关闭防火墙"></a>1. 关闭防火墙</h2><p>查看防火墙状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables status</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200305093335490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>关闭防火墙：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chkconfig iptables off</span><br><span class="line">or</span><br><span class="line">service iptables stop</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200305093426847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-时间同步"><a href="#2-时间同步" class="headerlink" title="2. 时间同步"></a>2. 时间同步</h2><p>date命令查看时间是否同步：</p><p><img src="https://img-blog.csdnimg.cn/20200305093950253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可见，时间已经同步，如果不同步的话，可以采取以下命令进行同步。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ntp ntpdate</span><br><span class="line"> ntpdate cn.pool.ntp.org</span><br></pre></td></tr></table></figure><h2 id="3-测试两台电脑互相访问"><a href="#3-测试两台电脑互相访问" class="headerlink" title="3. 测试两台电脑互相访问"></a>3. 测试两台电脑互相访问</h2><p>可以互相访问，但此时还需要秘钥来登录：<br><img src="https://img-blog.csdnimg.cn/20200305095713517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-创建密钥对"><a href="#4-创建密钥对" class="headerlink" title="4. 创建密钥对"></a>4. 创建密钥对</h2><p>用<strong>ssh-keygen -t rsa -P ‘’</strong> 来创建密钥对<br><img src="https://img-blog.csdnimg.cn/20200305095953222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200305100000725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200305100033287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-发送公钥"><a href="#5-发送公钥" class="headerlink" title="5. 发送公钥"></a>5. 发送公钥</h2><p><strong>scp id_rsa.pub slaver20:~</strong><br><strong>或scp id_rsa.pub master10:~</strong><br>将公钥发送到对方电脑上：<br><img src="https://img-blog.csdnimg.cn/2020030510032848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-把公钥填到信任列表"><a href="#6-把公钥填到信任列表" class="headerlink" title="6. 把公钥填到信任列表"></a>6. 把公钥填到信任列表</h2><p>在另一台电脑上将公钥移至.ssh文件夹中（将其放入authorized_keys文件中）：<br>cat id_rsa.pub &gt;&gt; .ssh/authorized_keys：<br><img src="https://img-blog.csdnimg.cn/20200305100601581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到，master的公钥是slaver的，slaver的公钥是master的。<br><img src="https://img-blog.csdnimg.cn/20200305100609621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-两台主从服务器互通免秘钥配置"><a href="#7-两台主从服务器互通免秘钥配置" class="headerlink" title="7. 两台主从服务器互通免秘钥配置"></a>7. 两台主从服务器互通免秘钥配置</h2><p>最后进行测试：<br><img src="https://img-blog.csdnimg.cn/20200305101000128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如图可见，实现了免秘钥登录。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200305091516937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM</summary>
      
    
    
    
    <category term="实验" scheme="http://example.com/categories/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="大数据" scheme="http://example.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="实验" scheme="http://example.com/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>实验项目五：备份和恢复</title>
    <link href="http://example.com/2020/04/05/%E5%AE%9E%E9%AA%8C%E9%A1%B9%E7%9B%AE%E4%BA%94%EF%BC%9A%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D/"/>
    <id>http://example.com/2020/04/05/%E5%AE%9E%E9%AA%8C%E9%A1%B9%E7%9B%AE%E4%BA%94%EF%BC%9A%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D/</id>
    <published>2020-04-05T07:30:16.000Z</published>
    <updated>2021-02-21T14:44:12.778Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200301095149428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="实验内容与步骤"><a href="#实验内容与步骤" class="headerlink" title="实验内容与步骤"></a>实验内容与步骤</h1><h3 id="1-确认系统是否有yum云的dump抓包工具，原因dump默认6-3版本没有安装。"><a href="#1-确认系统是否有yum云的dump抓包工具，原因dump默认6-3版本没有安装。" class="headerlink" title="1. 确认系统是否有yum云的dump抓包工具，原因dump默认6.3版本没有安装。"></a>1. 确认系统是否有yum云的dump抓包工具，原因dump默认6.3版本没有安装。</h3><p>默认版本没有安装，输入命令 <strong>yum -y install dump.i686</strong> 进行安装</p><p><img src="https://img-blog.csdnimg.cn/20200301102123399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200301102135373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-确认好了可以yum安装了。"><a href="#2-确认好了可以yum安装了。" class="headerlink" title="2. 确认好了可以yum安装了。"></a>2. 确认好了可以yum安装了。</h3><p><img src="https://img-blog.csdnimg.cn/20200301102401969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-如果要备份分区-、如何查看，之前课程shell已经学过命令。"><a href="#3-如果要备份分区-、如何查看，之前课程shell已经学过命令。" class="headerlink" title="3. 如果要备份分区 、如何查看，之前课程shell已经学过命令。"></a>3. 如果要备份分区 、如何查看，之前课程shell已经学过命令。</h3><p><img src="https://img-blog.csdnimg.cn/20200301102904756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-进行备份boot分区所有文件并把它保存到-tmp-目录下。"><a href="#4-进行备份boot分区所有文件并把它保存到-tmp-目录下。" class="headerlink" title="4. 进行备份boot分区所有文件并把它保存到/tmp/目录下。"></a>4. 进行备份boot分区所有文件并把它保存到/tmp/目录下。</h3><p>输入命令：<strong>dump -0uj -f /tmp/boot.bak.bz1 /boot</strong><br><img src="https://img-blog.csdnimg.cn/20200301102934844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查看tmp目录下是否存在备份：<br><img src="https://img-blog.csdnimg.cn/20200301102947150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到，该目录下已经存在文件了。</p><h3 id="5-查看备份成功后的信息。"><a href="#5-查看备份成功后的信息。" class="headerlink" title="5. 查看备份成功后的信息。"></a>5. 查看备份成功后的信息。</h3><p>/boot 有过0级备份。<br><img src="https://img-blog.csdnimg.cn/20200301103408774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="6-拷贝一个文件到boot目下我们做下增量备份。"><a href="#6-拷贝一个文件到boot目下我们做下增量备份。" class="headerlink" title="6. 拷贝一个文件到boot目下我们做下增量备份。"></a>6. 拷贝一个文件到boot目下我们做下增量备份。</h3><p>将install.log复制到/boot下并改名为hhhinstall.log，查看是否备份成功。<br><img src="https://img-blog.csdnimg.cn/20200301103755783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="7-我们做第一次增量备份代码。"><a href="#7-我们做第一次增量备份代码。" class="headerlink" title="7. 我们做第一次增量备份代码。"></a>7. 我们做第一次增量备份代码。</h3><p>/boot 有过一次1级备份。</p><p><img src="https://img-blog.csdnimg.cn/20200301104522529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="8-查看增量备份的大小很小的速度也很快。"><a href="#8-查看增量备份的大小很小的速度也很快。" class="headerlink" title="8. 查看增量备份的大小很小的速度也很快。"></a>8. 查看增量备份的大小很小的速度也很快。</h3><p>增量备份比完全备份小，很明显。</p><p><img src="https://img-blog.csdnimg.cn/20200301104425870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="9-查看分区的备份等级及记录。"><a href="#9-查看分区的备份等级及记录。" class="headerlink" title="9. 查看分区的备份等级及记录。"></a>9. 查看分区的备份等级及记录。</h3><p><img src="https://img-blog.csdnimg.cn/20200301104736107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="10-还原数据。"><a href="#10-还原数据。" class="headerlink" title="10. 还原数据。"></a>10. 还原数据。</h3><p><img src="https://img-blog.csdnimg.cn/20200301104931770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ5MTYyMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200301095149428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM</summary>
      
    
    
    
    <category term="实验" scheme="http://example.com/categories/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="大数据" scheme="http://example.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="实验" scheme="http://example.com/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
</feed>
